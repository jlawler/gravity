#!/usr/bin/env ruby
require 'rubygems'
require 'bundler'
Bundler.setup
require 'pp'
require 'rubygems'
require 'gosu'

$:.unshift "./lib"
require 'gosu_circle'
require 'frame'
require 'planetoid'
require 'config_parser'

class Gravity < ( Gosu::Window)
  def initialize frame
    @frame = frame 
    super @frame.width, @frame.height
    @font = Gosu::Font.new(20)

    self.caption = "Jer's Solar System Simulator"
    @frame.window = self
  end
  def draw
    @font.draw("T: %2.02f  F%04i    Z:%2.02f  Speed: %2.02f" % [@frame.time, @frame.frame,  @frame.zoom, @frame.speed], 10, 10, 1, 1.0, 1.0, 0xff_ffff00)
    unless GravityConf.paused
      @frame.frame += 1
      @frame.time += @frame.speed
      GravityConf.bodies.each do |body_a|
        GravityConf.bodies.each do |body_b|
          next if body_a.name==body_b.name
          body_a.queue_gravity_from( body_b)
        end
      end
      GravityConf.bodies.each{|e|e.update_pos }
      #STDERR.puts GravityConf.bodies.select{|e|e.name=='sun'}.first.pos
      #STDERR.puts SUN.dist_to EARTH  if @frame.frame%10 == 0
      #STDERR.puts "SUN POS #{SUN.pos}"
      #STDERR.puts "V #{EARTH.vel}"
      #STDERR.puts "V MAG #{EARTH.vel.magnitude}"
      #puts @frame.frame if @frame.frame%10 == 0
    end
    GravityConf.bodies.each(&:draw)
  end
  def button_down(id)
    if id==Gosu::KB_Q
      Kernel.exit!
    elsif id==Gosu::KB_UP
      @frame.zoom *= 1.1
      #puts @frame.zoom
    elsif id==Gosu::KB_DOWN
      @frame.zoom /= 1.1
      #puts @frame.zoom
    elsif id==Gosu::KB_SPACE
      GravityConf.paused = !GravityConf.paused  
    elsif id==Gosu::KB_MINUS
      @frame.speed=@frame.speed/1.1
    elsif id==Gosu::KB_EQUALS
      @frame.speed=@frame.speed*1.1
    end
  end
end

frame = Frame.new
GravityConf = GravityConfig.parse_file frame,   ARGV.first || 'config.yml'
pp GravityConf.bodies.size

Gravity.new(frame).show
